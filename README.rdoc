== README

Adaquate Expenses is a multi-tenant (extemely) lightweight expense tracking app written in EmberJS and uses a Ruby on Rails API in order to login, create accounts and edit expenses.

Expenses from one user are not visable, editable or destroyable by another user.

Users can be logged in from multiple independent session.


* Ruby version
2.1.2

* Setup for development
cd into the Adequate Expenses directory and run
  bundle install
  rake db:setup
  rails s

  You should be able to bring up a web browser and navigate to localhost:3000


* How to run the test suite

* API
  All api actions are performed through the nested route /api.  There are 3 controllers.

  Signup is handled by the Api::AccountsController
    /api/accounts
      - Accepts :email (which we are treating like a username) and :password
        if email is found returns
          success: false
          message: "Duplicate Username!"
        if email not found but password is blank (not present or empty)
          success: false
          message: "Please enter a password"
        otherwise creates an account using username and password and returns
          success: true
          message: "Account Create, Logging In!"
          token: --A randomly generated api token for login--

  Login is handled by the Api::SessionsController
  #  To be more security conscious, we should respond with a generic "Username or Password not found on each failed request"
  #    I wrote it this way just to give feed back on checking for both fields
    /api/sessions
      - Accepts :email (which we are treating like a username) and :password
        if email is not found returns
          success: false
          message: "Username Not Found"
        if email found but password is incorrect
          success: false
          message: "Please Check Password"
        if email and password match then
          success: true
          message: "Successfully Logged In!"
          token: --A randomly generated super long secure api token--


  Expense are handled by the Api::ExpensesController
    All actions follow normal RESTapi. This is a multitentant app so if the user does not own the expense or is not logged in.  Any actions will return
      message: "Unauthorized"
      status: 403

    /api/expenses

  Reports generates the weekly breakdown and is handled by Api::ReportsController
    It uses the service object ReportGenerator in order to find expenses for a user and return the JSON to that request.
    /api/reports
      if user is not logged in and requests the url
        status: 403
        message: "Unauthorized"
      if user is logged in returns a json response in the following format.
        "YYYY-WW":
          "amount": the total spent during the week
          "average": the average amount of each expense in the time frame
          "total_expenses": the number of expenses in the week of that year

        Mulitple weeks can be in this object, all objects that do not have a date are summarized in the "0000-00" week
